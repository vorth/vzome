
plugins {
    id "application"
    id "org.panteleyev.jpackageplugin" version "1.5.2"
}


description = 'vzome-desktop'

def injectionKeys = [
    'version', 'edition', 'buildNumber', 'gitCommit',
    'githubClientId', 'githubClientSecret', 'githubRepoName'
]

task recordBuildProperties {
    def propsFile = file( "$buildDir/buildPropsResource/build.properties" )
    ext.outputDir = propsFile .getParentFile()
    doFirst {
        writeProjectProperties( injectionKeys, propsFile )
        println " recorded desktop build properties in $propsFile"
    }
}
processResources { 
    dependsOn recordBuildProperties
    from recordBuildProperties.outputDir
}

task installUnityJars( type: Copy ) {
    dependsOn installDist
    from( "$buildDir/install/desktop/lib" ) {
        include 'core-*.jar'
        include 'jackson-*.jar'
        include 'vecmath-*.jar'
    }
    into "${rootProject.projectDir}/oculus/Assets/Plugins/Android"
}

// used by the 'application' plugin
ext.jvmArgs = [
    "apple.laf.useScreenMenuBar": "true",
    "apple.awt.antialiasing": "true",
    "apple.awt.application.name": appName,
    "com.apple.macos.use-file-dialog-packages": "true",
    "com.apple.macos.useScreenMenuBar": "true",
    "com.apple.smallTabs": "true",
    "java.util.logging.config.file": "logging.properties" ]
ext.vzomeArgs = [  // a list, not a map
    '-entitlement.model.edit', 'true', '-entitlement.lesson.edit', 'true', '-entitlement.all.tools', 'true',
    '-licensed.user', 'whomever' ]

// used by both 'application' and 'launch4j' Gradle plugins
mainClassName = 'org.vorthmann.zome.ui.ApplicationUI'
// used by the 'application' Gradle plugin
run.args( vzomeArgs )
applicationDefaultJvmArgs = [ '-Xmx3072M', '-Dfile.encoding=UTF8', 
    // These are needed for Windows only.  See the jpackage comments below.
        "--add-exports",
        "java.base/java.lang=ALL-UNNAMED",
        "--add-exports",
        "java.desktop/sun.awt=ALL-UNNAMED",
        "--add-exports",
        "java.desktop/sun.java2d=ALL-UNNAMED",
]
jvmArgs.each { entry ->
    applicationDefaultJvmArgs << "-D$entry.key=$entry.value"
}

// for application distZip task
distZip.archiveName = "${rootProject.appName}-Linux-${rootProject.version}.${rootProject.buildNumber}.zip"

// for application startScripts task
startScripts.applicationName="${rootProject.appName}-${rootProject.version}"

// Not sure why the 'test' sourceSet has to be specifically declared here 
// before it will show up in the NetBeans 'Projects' window.
// It shows up in the vzome-core project without explicitly being listed.
sourceSets {
    test {
        java.srcDir file('src/test/java')
    }
}

dependencies {
    implementation group: 'com.github.scribejava', name: 'scribejava-apis', version: '8.1.0'
    implementation group: 'com.github.scribejava', name: 'scribejava-httpclient-okhttp', version: '8.1.0'
    implementation group: 'org.eclipse.mylyn.github', name: 'org.eclipse.egit.github.core', version: '5.12.0.202106021050-rc1'

    implementation group: 'java3d', name: 'vecmath', version:'1.6.0-final'

    // VERY important: as long as we are using a release of JOGL, not a release candidate,
    //  we can use the documented Maven dependency approach:
    //     https://jogamp.org/wiki/index.php?title=Maven
    implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version:'2.4.0'
    implementation group: 'org.jogamp.jogl', name: 'jogl-all-main', version:'2.4.0'

    implementation group: 'javax.media.jai', name: 'com.springsource.javax.media.jai.core', version:'1.1.3'
    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j.debug', version: '0.8.1'
    
    testImplementation group: 'junit', name: 'junit', version:'4.12'
}

sourceSets {
    main {
        resources {
            // The convention-based default built-in srcDir is 'src/main/resources' 
            // Append any additional SrcDir entries here...
            
            // listed alphabetically
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.md'
            include '**/*.pdf'
            include '**/*.png'
            include '**/*.properties'
            include '**/*.py'
            include '**/*.vef'
            include '**/*.vZome'
            include '**/*.zomic'
            include '**/*.html'
            include '**/*.js'
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'vzome-desktop',
                   'Implementation-Version': project.version
    }
}

// The mainClass property is needed to run a Gradle project from the Netbeans IDE (and maybe others too).
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

def writeProjectProperties( keys, propsFile )
{
    def outputDir = propsFile .getParentFile()
    outputDir.exists() || outputDir.mkdirs()
    def buildProps = new Properties()
    project.properties.findAll( { it.key in keys } ) .each {
        buildProps .put( it.key, it.value.toString() )
    }
    def writer = new FileWriter( propsFile )
    try {
        buildProps .store( writer, null )
        writer.flush()
    } finally {
        writer.close()
    }
}

// These options apply to all java projects
// More info at http://www.javaworld.com/article/2073587/javac-s--xlint-options.html
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs \
		<< "-Xdiags:verbose" \
		<< "-Xlint:all" \
		<< "-Xlint:cast" \
		<< "-Xlint:deprecation" \
		<< "-Xlint:divzero" \
		<< "-Xlint:empty" \
		<< "-Xlint:fallthrough" \
		<< "-Xlint:finally" \
		<< "-Xlint:overrides" \
		<< "-Xlint:path" \
		<< "-Xlint:rawtypes" \
		<< "-Xlint:unchecked" \
		<< "-Xlint:serial" 
	}
}

jpackage {
    dependsOn( "installDist" )

    // verbose = true

    input = "$buildDir/install/desktop/lib"
    destination = "$buildDir/jpackage"

    appName = "${->project.appName}"
    appVersion = "${->project.version}.${->project.buildNumber}"
    vendor = "vzome.com"

    mainJar = jar.archiveName
    mainClass = mainClassName

    arguments = vzomeArgs

    additionalParameters = []
    applicationDefaultJvmArgs.each { entry ->
        additionalParameters << "--java-options"
        additionalParameters << "$entry"
    }

    fileAssociations = [ "file-associations.properties" ]

    mac {
        icon = "platform/mac/vZome-6.icns"
        macPackageIdentifier = "com.vzome.desktop.${->project.version}"
        macPackageName = "$appName-$appVersion"
        macSign = true
        macSigningKeyUserName = "Scott Vorthmann"
        additionalParameters << "--mac-signing-keychain"
        additionalParameters << "$keychain"
    }
    windows {
        icon = "platform/windows/resources/icons/vZomeLogo.ico"

        winDirChooser = true
        winShortcut = true

        // These --add-exports seem to be required to get JOGL 2.4 to work with Java 17 on Windows
        //  see:  https://forum.jogamp.org/JOGL-2-4-and-Java-17-report-td4041572.html
        //  and:  https://github.com/jzy3d/jzy3d-api/issues/230#issuecomment-1004197519
        additionalParameters << "--java-options"
        additionalParameters <<     "--add-exports"
        additionalParameters << "--java-options"
        additionalParameters <<     "java.base/java.lang=ALL-UNNAMED"
        additionalParameters << "--java-options"
        additionalParameters <<     "--add-exports"
        additionalParameters << "--java-options"
        additionalParameters <<     "java.desktop/sun.awt=ALL-UNNAMED"
        additionalParameters << "--java-options"
        additionalParameters <<     "--add-exports"
        additionalParameters << "--java-options"
        additionalParameters <<     "java.desktop/sun.java2d=ALL-UNNAMED"
    }

    // doLast {
    //     println "appName is $appName"
    //     println "appVersion is $appVersion"
    //     println "macPackageName is $macPackageName"
    // }
}
