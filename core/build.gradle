
ext.gitCommit = System.getenv( "GIT_COMMIT" ) ?: 'HEAD'

description = "vzome-core"

ext.antlr4 = [
    antlrSource:    "src/main/antlr",
    // Simplify multiple IDE integration by putting destinationDir under src/main/java
    // Some IDEs don't corectly read multiple source folders from build.gradle.
    destinationDir: "src/main/java/com/vzome/core/antlr/generated",
    grammarpackage:               "com.vzome.core.antlr.generated"
]
  
/*
    Building the top level vzome project displays the following warning:

        :core:compileTestJava
        POM relocation to an other version number is not fully supported in Gradle : xml-apis:xml-apis:2.0.2 relocated to xml-apis:xml-apis:1.0.b2.
        Please update your dependency to directly use the correct version 'xml-apis:xml-apis:1.0.b2'.
        Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.

    By adding the configurations.all section below, the warning message is avoided.
*/
configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
    all*.exclude group: 'org.abego.treelayout', module: 'org.abego.treelayout.core'
}

// Support for decoupled "regression" task
sourceSets {
    main {
        java {
            //  Uncomment these for the jsweet target, and adjust compileJava above
            println( project.gradle.startParameter.taskNames )
            if( project.gradle.startParameter.taskNames.contains( 'core:jsweet' ) ) {
                srcDir file( 'src/main/java' )
                srcDir file( 'src/jsweet/java' )
            }
            
            exclude 'com/vzome/opengl/FancyRenderer.java'
        }
    }
    regression {
        java.srcDir file( 'src/regression/java' )
    } 
}

task recordBuildProperties {
    def propsFile = file( "$buildDir/buildPropsResource/vzome-core-build.properties" )
    ext.outputDir = propsFile .getParentFile()
    doFirst {
        writeProjectProperties( [ 'version', 'gitCommit' ], propsFile )
        println " recorded core build properties in $propsFile"
    }
}
processResources {
    dependsOn recordBuildProperties
    from recordBuildProperties.outputDir
}


dependencies {
    compile     group: 'org.antlr',         name: 'antlr4',            version:'4.7.1'
    compile     group: 'java3d',            name: 'vecmath',           version:'1.6.0-final'
    compile     group: 'org.python',        name: 'jython',            version:'2.7.1b3'
    compile     group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
    compile     group: 'org.jogamp', name: 'jogl-all', version:'v2.4.0-rc-20200307'

    compile group: 'antlr',             name: 'antlr',             version:'2.7.7'

	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.3'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'

    compile group: 'org.jsweet', name: 'jsweet-transpiler', version: '2.3.7'
    compile group: 'org.jsweet', name: 'jsweet-core', version: "6.1.0"
    compile group: 'org.jsweet', name: 'j4ts', version: '0.7.0-SNAPSHOT'

    runtime     group: 'org.python',        name: 'jython',            version:'2.7.1b3'
    runtime     group: 'java3d',            name: 'vecmath',           version:'1.6.0-final'
    runtime     group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'

    testCompile group: 'antlr',             name: 'antlr',             version:'2.7.7'
    testCompile group: 'junit',             name: 'junit',             version:'4.12'

    antlr4      group: 'org.antlr',         name: 'antlr4',            version: '4.7.1'

    regressionCompile sourceSets.main.output
    regressionCompile configurations.testCompile
    regressionCompile sourceSets.test.output
    regressionRuntime configurations.testRuntime
}

// These options apply to all java projects
// More info at http://www.javaworld.com/article/2073587/javac-s--xlint-options.html
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs \
		<< "-Xdiags:verbose" \
		<< "-Xlint:all" \
		<< "-Xlint:cast" \
		<< "-Xlint:divzero" \
		<< "-Xlint:empty" \
		<< "-Xlint:fallthrough" \
		<< "-Xlint:finally" \
		<< "-Xlint:overrides" \
		<< "-Xlint:path" \
		<< "-Xlint:rawtypes" \
		<< "-Xlint:unchecked" \
		<< "-Xlint:-serial" 
		// TODO: Enable the serial warning and look into fixing ~33 issues. 
		// Most of them are classes which extend a generic Collection or Exception.
	}
}

// It seems that the settings below are the starting point
// and that the ones above override them, so only put 
// settings above if they are identical in all projects.

// This applies only to the primary 'compile' java project
compileJava {
    options.compilerArgs \
	<< "-Xlint:deprecation" \
}

// This applies only to the 'test' java project
compileTestJava {
	// These warnings exist in the older legacy zomic code 
	// which we don't plan to maintain 
	// except for regression and backward compatibility testing.
    options.compilerArgs \
	<< "-Xlint:-deprecation" /* A minus sign following the colon removes that check. */
}

// Successive runs of 'test' tasks will not be executed 
//  unless the results of the previous run are 'cleaned'.
//
// Individual tests or a group of tests based on method name patterns 
//  can be run from the gradle command line.
//
// The method name(s) of individual tests or groups of tests to be run 
//  can be specified by specifying a pattern matching the fully qualified name of the test class method
//  or with appropriate wildcards.
// Note that the patterns are CaSe SeNsItIve.
// For example, a pattern to execute the three tests: 
//  testOK_RedAliases, testOK_BlueAliases and testOK_YellowAliases
//  would be *testOK_*Aliases
//
// Standard Output and Standard Error are not displayed by default for gradle tests.
// Use -P"testLogging.showStandardStreams" in the command line to enable them as shown below.
//
// To execute the same test or group of tests repeatedly, 
//  use a gradle command line like this:
//
// gradle cleanTest test --tests *testOK_*Aliases
//
// ... or with standard streams displayed to the console:
// gradle cleanTest test --tests *testOK_*Aliases -P"testLogging.showStandardStreams"
//
test {
	def loggingProperties = new File ('src/test/java/logging.properties')
	if(loggingProperties.exists()) {
		jvmArgs "-Djava.util.logging.config.file=${loggingProperties.absolutePath}"
	}
	doLast {
		if(loggingProperties.exists()) {
			println("Tests used java.util.logging.config.file: ${loggingProperties.absolutePath}")
		}
	}
	testLogging {
		// Only set showStandardStreams=true from the gradle command line.
		//  using -P"testLogging.showStandardStreams"
		// Otherwise, it normally defaults to false which is correct for the NetBeans IDE.
		if( project.hasProperty( 'testLogging.showStandardStreams' ) ) {
			// Make sure output from standard out or error is shown in Gradle output.
			showStandardStreams = true

			// Or we use events method:
			// events 'standard_out', 'standard_error' // ,'started', 'passed'

			// Or set property events:
			// events = ['standard_out', 'standard_error']

			// Instead of string values we can use enum values:
			// events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
			//        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
		}
	}
}

task makeAntlrOutputDir {
	outputs.dir antlr4.destinationDir
	doLast() {
		// Be sure to wrap this inside doLast(). 
		// Otherwise it will run during the initialization or configuration phase, even when an unrelated task is is run.
		//println 'Making Antlr Output Directory: ' + antlr4.destinationDir
		file(antlr4.destinationDir).mkdirs()
	}
}


// This is a start in case we ever want to put each language into its own folder.
// It got messy to do with separate Lexer and Parser grammars so I dumped them all in the same folder for now
// We may eventually remove this part if we don't use it.

//task makeAntlrOutputDirTree << {
//    String pkg = antlr4.grammarpackage.replaceAll("\\.", "/")
//    String srcRoot = antlr4.antlrSource + "/" + pkg'
//    String dstRoot = antlr4.destinationDir + "/" + pkg
//    def tree = fileTree(srcRoot).include('**/*.g4')
//    tree.visit {element ->
//        // this will only build the dstPath folder if there is a .g4 file under the srcRoot folder
//        if (!element.isDirectory()) {
//            String dstPath = dstRoot + "/" + element.relativePath
//            //println "dstPath = " + dstPath
//            // strip filename from dstPath so only folders remain
//            dstPath = dstPath.substring(0, dstPath.lastIndexOf("/"))
//            //println "DstPath = " + dstPath
//            file(dstPath).mkdirs()
//        }
//    }
//}

// According to https://gradle.org/docs/current/userguide/more_about_tasks.html...
// A task with no defined outputs will never be considered up-to-date.
// A task with only outputs (no inputs) defined will be considered up-to-date if those outputs are unchanged since the previous build.
task compileAntlrGrammars(type: JavaExec , dependsOn: makeAntlrOutputDir) {
    // Grammars are conveniently sorted alphabetically. I assume that will remain true.
    // That ensures that files named *Lexer.g4 are listed and therefore processed before the corresponding *Parser.g4
    // It matters because the Lexer must be processed first since the Parser needs the .tokens file from the Lexer.
    // Also note that the output file naming convention for combined grammars is slightly different from separate Lexer and Parser grammars.
    // Also, changing the args when invoking Antlr will change the files it generates which affects the outputs collection.
    def grammars = fileTree(antlr4.antlrSource).include('**/*.g4')
    //def pkg = antlr4.grammarpackage.replaceAll("\\.", "/")
    def target = file("${antlr4.destinationDir}") ///${pkg}")
    inputs.files grammars
    outputs.dir target

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    // Antlr command line args are at https://theantlrguy.atlassian.net/wiki/display/ANTLR4/ANTLR+Tool+Command+Line+Options
    args = ["-o", target,
            "-lib", target,
            // "-Dlanguage=JavaScript",  // enabled this just as an experiment
            //"-listener",      //"-listener" is the default
            //"-no-visitor",    //"-no-visitor" is the default
            "-package", antlr4.grammarpackage,
            grammars.files //grammars.collect{ relativePath(it) } // may want to do something with relative paths so leave this sample code here for now
    ].flatten()
    //println args

    // include optional description and group (shown by ./gradlew tasks command)
    description = 'Generates Java sources from ANTLR4 grammars.'
    group       = 'Build'
}

compileJava {
    dependsOn compileAntlrGrammars
    // this net line isn't technically needed unless the antlr4.destinationDir is not under buildDir, but it doesn't hurt either
    source antlr4.destinationDir
}

task cleanAntlr {
	doLast() {
		// Be sure to wrap this inside doLast(). 
		// Otherwise it will run during the initialization or configuration phase, even when an unrelated task is is run.
		// It would also run when the NetBeas IDE first loaded the project.
		//println 'Deleting Antlr Directory: ' + antlr4.destinationDir
		delete antlr4.destinationDir
	}
}
clean.dependsOn cleanAntlr

// These tasks are used to run the vZome regression test suite
def regressionOutputDir = new File(buildDir.toString() + '/test-results/regression')
task makeRegressionOutputDir {
	outputs.dir regressionOutputDir
	doLast() {
		// Be sure to wrap this inside doLast(). 
		// Otherwise it will run during the initialization or configuration phase, even when an unrelated task is is run.
		println 'Making Regression Output Directory: ' + regressionOutputDir
		regressionOutputDir.mkdirs()
	}
}

task regression(type: JavaExec, dependsOn: check) {
    group = 'Verification'
    description = """Run regression testing
        command-line options:
            -PregressionHome=src/regression/files     (default shown, value can be absolute or relative)
            -PregressionFile=sniff-test.vZome-files   (default shown, relative to regressionHome)
    If the regressionFile is a ".vZome-files" file, it can contain paths that are
    resolved relative to regressionHome.
    """
    def testHome = 'src/regression/files'
    if( project .hasProperty( "regressionHome" ) ){
        testHome = regressionHome
        println "testHome is $testHome"
    }
    def testFile = 'sniff-test.vZome-files'
    if( project .hasProperty( "regressionFile" ) ){
        testFile = regressionFile
        println "testFile is $testFile"
    }
    def testOut = 'build/test-results/regression/TEST-output.xml'
    if( project .hasProperty( "regressionOutput" ) ){
        testOut = regressionOutput
        println "testOut is $testOut"
    }
    classpath = sourceSets.regression.runtimeClasspath
    main = 'com.vzome.core.regression.TestVZomeFiles'
    args( testHome, testFile, testOut )
    jvmArgs( '-Xmx3072M' )
    jvmArgs( '-Djava.util.logging.config.file=core/regression-logging.properties' )
}
regression.dependsOn makeRegressionOutputDir


[ '01-Jan', '02-Feb', '03-Mar', '04-Apr', '05-May', '06-Jun', '07-Jul', '08-Aug', '09-Sep', '10-Oct', '11-Nov', '12-Dec' ]
.each { def month ->
    task "regression-$month"( dependsOn: [check, makeRegressionOutputDir], type: JavaExec ) {
        def testHome = 'src/regression/files'
        if( project .hasProperty( "regressionHome" ) ){
            testHome = regressionHome
        }
        def testYear = '2015'
        if( project .hasProperty( "regressionYear" ) ){
            testYear = regressionYear
        }
        def testFile = "${testYear}/${month}"
        def testOut = "build/test-results/regression/TEST-${testYear}-${month}.xml"
        if( project .hasProperty( "regressionOutput" ) ){
            testOut = regressionOutput
        }
        classpath = sourceSets.regression.runtimeClasspath
        main = 'com.vzome.core.regression.TestVZomeFiles'
        args( testHome, testFile, testOut )
        jvmArgs( '-Xmx3072M' )
    }
}
task regressionYear( dependsOn: tasks.matching { Task task -> task.name.startsWith( "regression-" ) } )


task dump4dPolytope( type: JavaExec, dependsOn: build ) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.vzome.core.apps.Dump4dPolytopeVson'

	group = 'Verification'
}

task zomicPP( type: JavaExec, dependsOn: build) {
    def theFile = 'src/regression/files/Zomic/yellowAxisSaddleWeb/yellowAxisSaddleWeb.zomic'
	if( project.hasProperty( 'zomicFile' ) ){
		theFile = zomicFile
	}
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.vzome.core.zomic.program.PrintVisitor'
    args( theFile )

	group = 'Verification'
    description = """Pretty-Prints the specified Zomic file
        command-line options:
            -PzomicFile="$theFile"		(default shown, value can be absolute or relative)
                Prints the file using the ORIGINAL zomic parser.
            -P-new
                Prints the file using the NEW Antlr4 zomic compiler.
    Sample Usage:
        gradle zomicPP -PzomicFile="$theFile"
        gradle zomicPP -PzomicFile="$theFile" -P-new
  The output should be identical to $theFile-pp
    """

	doLast { // doFirst and doLast are executed only during the execution phase, not during the initialization or configuration phases.
		if( !project.hasProperty( 'zomicFile' ) ){
			println ""
			println "No zomic file was specified. Using default: $theFile"
			println description
			println ""
		}
	}
}

jar {
    manifest {
        attributes 'Implementation-Title': 'vzome-core',
                   'Implementation-Version': version
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}


def writeProjectProperties( keys, propsFile )
{
    def outputDir = propsFile .getParentFile()
    outputDir.exists() || outputDir.mkdirs()
    def buildProps = new Properties()
    project.properties.findAll( { it.key in keys } ) .each {
        buildProps .put( it.key, it.value.toString() )
    }
    def writer = new FileWriter( propsFile )
    try {
        buildProps .store( writer, null )
        writer.flush()
    } finally {
        writer.close()
    }
}


buildscript {
	repositories {
		mavenCentral()
		maven { url "http://repository.jsweet.org/artifactory/libs-release-local" }
		maven { url "http://repository.jsweet.org/artifactory/plugins-release-local" }
	}
	dependencies {
		classpath("org.jsweet:jsweet-gradle-plugin:2.3.7") { transitive = true }
	}
}

apply plugin: 'org.jsweet.jsweet-gradle-plugin'

jsweet {
	veryVerbose = true
	encoding = 'UTF-8'
	sourceMap = false  // I can't set breakpoints if the browser cannot find the Java file, so disabling for now.

    // module = 'es2015'

    bundle = true

	outDir = new File('client/public/jsweet')

	targetVersion = 'ES6'
    tsOnly = false
	includes = [
        'java/io/*.java',
        'java/nio/*.java',
        'java/text/*.java',
        'java/util/*.java',
        'org/w3c/dom/*.java',

        'com/vzome/jsweet/*.java',

        'com/vzome/xml/DomUtils.java',
        'com/vzome/xml/ResourceLoader.java',

        'com/vzome/core/generic/*.java',

        'com/vzome/core/math/*.java',

        'com/vzome/core/math/symmetry/*.java',

        'com/vzome/core/math/convexhull/*.java',

        'com/vzome/core/algebra/*.java',

        'com/vzome/core/construction/*.java',

        'com/vzome/core/commands/*.java',

        'com/vzome/core/model/Group.java',
        'com/vzome/core/model/GroupElement.java',
        'com/vzome/core/model/Manifestation.java',
        'com/vzome/core/model/ManifestationChanges.java',
        'com/vzome/core/model/Connector.java',
        'com/vzome/core/model/Strut.java',
        'com/vzome/core/model/Panel.java',
        'com/vzome/core/model/RealizedModel.java',
        'com/vzome/core/model/SimpleMeshJson.java',
        'com/vzome/core/model/ColoredMeshJson.java',

        'com/vzome/core/editor/api/*.java',

        'com/vzome/core/edits/*.java',

        'com/vzome/core/kinds/DefaultFieldApplication.java',
        'com/vzome/core/kinds/GoldenFieldApplication.java',

        'com/vzome/api/Tool.java',
        'com/vzome/core/tools/*.java',
        'com/vzome/core/editor/Duplicator.java',
        'com/vzome/core/editor/AbstractToolFactory.java',
        'com/vzome/core/editor/CommandEdit.java',
        'com/vzome/core/editor/Tool.java',
        'com/vzome/core/editor/ToolsModel.java',
        'com/vzome/core/editor/BeginBlock.java',
        'com/vzome/core/editor/EndBlock.java',
        'com/vzome/core/editor/ApplyTool.java',
        'com/vzome/core/editor/SelectToolParameters.java',
        'com/vzome/core/editor/FieldApplication.java',
        'com/vzome/core/editor/SymmetrySystem.java',
        'com/vzome/core/editor/SelectionSummary.java',
        'com/vzome/core/kinds/AbstractSymmetryPerspective.java',
        'com/vzome/core/kinds/OctahedralSymmetryPerspective.java',
        'com/vzome/core/kinds/IcosahedralSymmetryPerspective.java',
        'com/vzome/core/render/Colors.java',
        'com/vzome/core/viewing/AbstractShapes.java',
        'com/vzome/core/viewing/OctahedralShapes.java',
        'com/vzome/core/viewing/ExportedVEFShapes.java',
        'com/vzome/core/viewing/ExportedVEFStrutGeometry.java',
        'com/vzome/core/parts/StrutGeometry.java',
        'com/vzome/core/parts/FastDefaultStrutGeometry.java',
        'com/vzome/core/model/RenderedObject.java',
        'com/vzome/core/render/RenderedManifestation.java'
    ]
    excludes = [
        
        'com/vzome/core/algebra/BigRational.java',
        'com/vzome/core/algebra/RootThreeField.java',
        'com/vzome/core/algebra/AbstractAlgebraicField.java',
        'com/vzome/core/algebra/RootTwoField.java',
        'com/vzome/core/algebra/SnubDodecField.java',
        'com/vzome/core/algebra/PentagonField.java',
        'com/vzome/core/algebra/ParameterizedField.java',
        'com/vzome/core/algebra/HeptagonField.java',
        'com/vzome/core/algebra/AlgebraicSeries.java',
        'com/vzome/core/algebra/*Impl.java',
        'com/vzome/core/algebra/AlgebraicFields.java',

        'com/vzome/core/commands/ZomicVirtualMachine.java',
        'com/vzome/core/commands/CommandExecuteZomicScript.java',
        'com/vzome/core/commands/CommandExecutePythonScript.java',

    //     'com/vzome/core/model/*Impl.java',

        'com/vzome/core/edits/AffineHeptagon.java',
        'com/vzome/core/edits/HeptagonSubdivision.java',
        'com/vzome/core/edits/AdjustSelectionByOrbitLength.java',
        'com/vzome/core/edits/DodecagonSymmetry.java',
        'com/vzome/core/edits/GhostSymmetry24Cell.java',
        'com/vzome/core/edits/SelectAutomaticStruts.java',
        'com/vzome/core/edits/SelectParallelStruts.java',
        'com/vzome/core/edits/Symmetry4d.java',
        'com/vzome/core/edits/MapToColor.java',
        'com/vzome/core/edits/PolarZonohedron.java',
        'com/vzome/core/edits/Run*Script.java',
        'com/vzome/core/edits/Validate2Manifold.java',
        'com/vzome/core/edits/RealizeMetaParts.java',
        'com/vzome/core/edits/ReplaceWithShape.java'
    ]
}

