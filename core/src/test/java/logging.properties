############################################################
#   Custom Logging Configuration File
#
# You can use this file by specifying its filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
# If this file is placed in the working folder of vzome-desktop, 
#  it will automatically be used at startup.
# In the case of the Windows distribution of vzome-desktop,
#  it should be placed in the same folder as the executable file.
############################################################

############################################################
#   Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#handlers = java.util.logging.ConsoleHandler
# To use just the FileHandler, use the following line instead.
handlers = java.util.logging.FileHandler
# To use both handlers, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level = FINEST

############################################################
# From https://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html
# The levels in descending order are:
#    SEVERE (highest value)
#    WARNING
#    INFO
#    CONFIG
#    FINE
#    FINER
#    FINEST (lowest value)
# In addition there is a level OFF that can be used to turn off logging, 
#  and a level ALL that can be used to enable logging of all messages.
############################################################

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# See default values and additional explanation in vzome-desktop: org.vorthmann.zome.ui.ApplicationUI
# default file output is the vZomeLogs folder in user's home directory.
java.util.logging.FileHandler.pattern = %h/vZomeLogs/vZomeCustomLog%u.%g.log
java.util.logging.FileHandler.limit = 500000
java.util.logging.FileHandler.count = 10

# Windows defaults to windows-1252 encoding, so specify UTF8
# if extended characters (like phi as "\u03c6") need to be read from log files.
java.util.logging.FileHandler.encoding = UTF8

# Use either SimpleFormatter or XMLFormatter for the FileHandler...
# java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Positional elements used by SimpleFormatter.format:
#	%1$: date - a Date object representing event time of the log record.
#	%2$: source - a string representing the caller, if available; otherwise, the logger's name.
#	%3$: logger - the logger's name.
#	%4$: level - the log level.
#	%5$: message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. It uses java.text formatting and does not use the java.util.Formatter format argument.
#	%6$: thrown - a string representing the throwable associated with the log record and its backtrace beginning with a newline character, if any; otherwise, an empty string.
#   %n: newline character
#
# More at https://docs.oracle.com/javase/8/docs/api/java/util/logging/SimpleFormatter.html
#
# Common formats:
#java.util.logging.SimpleFormatter.format=%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s %4$s: %5$s%6$s%n
java.util.logging.SimpleFormatter.format=%4$s: %5$s%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################


###-------------------------------------------------------------------------------------------------
###
###  Set vZome logging properties here
###
###-------------------------------------------------------------------------------------------------

# Limit the message that are written to the log file to FINER and above.
 java.util.logging.FileHandler.level = FINER
# Limit the message that are printed on the console to FINEST and above.
 java.util.logging.ConsoleHandler.level = FINEST

# Uncomment the specific logger(s) listed below as needed
# Be sure to set the level of the handler(s) above 
#  to a level equal to, or lower than the level of the uncommented logger.

# Note that some of the loggers listed below are in vzome-core. Others are in vzome-desktop.

# To minimize vzome logging, but maximize Java and 3rd party logging (e.g. for debugging JOGL startup issues):
#  1) Set .level = ALL (above)
#  2) Set java.util.logging.FileHandler.level = ALL (above)
#  3) Consider using vZome-Windows-x64-5.0.l4j.ini to enable additional JOGL and java2d logging when used on a Windows platform.
#  4) Set all vzome logging to CONFIG here.
#org.vorthmann.level = CONFIG
#com.vzome.level = CONFIG

# To see edit commands as they are read from history, and then redone...
#org.vorthmann.zome.controller.level = FINER

#org.vorthmann.vzome.level = FINE
#org.vorthmann.zome.controller.level = CONFIG
#org.vorthmann.zome.ui.level = FINEST
# To see JVM args and verify that extended characters like phi are properly encoded in the log file. (Set FileHandler.encoding = UTF8 above)
#org.vorthmann.zome.ui.ApplicationUI.level = FINE

# for manifestation adds and removes
#com.vzome.core.model.level = FINER

# for command XML on redo
#com.vzome.core.EditHistory.level = FINE

#com.vzome.core.editor.level = FINE
#com.vzome.core.editor.Breakpoint = INFO
#com.vzome.core.editor.CommandEdit.level = FINER
#com.vzome.core.editor.CommandEdit.loadAndPerform.level = FINE
#com.vzome.core.editor.selection.level = FINER

#com.vzome.core.commands.importVEF.level = FINEST
#com.vzome.core.commands.h4polytope.level = FINE
#com.vzome.core.commands.XmlSaveFormat.level = WARNING

#com.vzome.core.construction.VefToModel.level = FINEST

#com.vzome.core.symmetry.controller.level = FINE

#com.vzome.core.snapshots.level = FINER
#com.vzome.core.thumbnails.level = FINER

# for a representation of the Zomic Syntax Tree as it is generated
#com.vzome.core.zomic.ZomicASTCompiler.level = FINER

#com.vzome.render.java3d.level = FINEST

#com.vzome.core.math.symmetry.Orbit.level=FINEST

###------------------------------------------------------
###    A few of the Java core and 3rd party loggers...
###------------------------------------------------------

#j3d.core.level = FINEST

#java.awt.level = FINEST
#java.awt.ContainerOrderFocusTraversalPolicy.level = FINE
#java.awt.focus.Component.level = FINER
#java.awt.focus.DefaultKeyboardFocusManager.level = FINER
#java.awt.focus.KeyboardFocusManager.level = FINER
#java.awt.mixing.Component.level = FINE
#java.awt.mixing.Container.level = FINE
#java.awt.Window.level = FINER

#javax.swing.level = FINEST
#javax.swing.BufferStrategyPaintManager.level = FINER
#javax.swing.SortingFocusTraversalPolicy.level = FINE

#sun.awt.level = FINEST
#sun.awt.focus.KeyboardFocusManagerPeerImpl.level = FINER
#sun.awt.im.InputContext.level = FINE
#sun.awt.multiscreen.SunDisplayChanger.level = FINER
#sun.awt.SunGraphicsCallback.level = FINER
#sun.awt.windows.focus.WComponentPeer.level = FINER
#sun.awt.windows.shape.WComponentPeer.level = FINER
#sun.awt.windows.WDesktopProperties.level = FINE
#sun.awt.windows.WToolkit.level = FINER
#sun.awt.windows.WWindowPeer.level = FINER
